
import express from "express";
import { messagingApi, middleware } from "@line/bot-sdk";

const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET
};

const client = new messagingApi.MessagingApiClient({ channelAccessToken: config.channelAccessToken });
const app = express();
app.use(middleware(config));

let latestTips = {
  ‡∏ó‡∏µ‡πÄ‡∏î‡πá‡∏î‡∏ö‡∏≠‡∏•: "‚öΩÔ∏è ‡∏ó‡∏µ‡πÄ‡∏î‡πá‡∏î‡∏ö‡∏≠‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï",
  ‡∏´‡∏ß‡∏¢: "üî¢ ‡∏´‡∏ß‡∏¢‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï",
  ‡∏°‡∏ß‡∏¢: "ü•ä ‡∏°‡∏ß‡∏¢‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï",
  ‡πÑ‡∏•‡∏ü‡πå: "üì∫ ‡πÑ‡∏•‡∏ü‡πå‡∏™‡∏î‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"
};

const names = ["‡∏™‡∏°‡∏Ñ‡∏ß‡∏£", "‡∏™‡∏°‡∏£", "‡∏™‡∏≤‡∏¢‡∏û‡∏¥‡∏ì", "‡∏™‡∏°‡∏®‡∏£‡∏µ", "‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå", "‡∏ß‡∏±‡∏ô‡∏î‡∏µ", "‡∏™‡∏∏‡∏î‡πÉ‡∏à", "‡∏™‡∏≤‡∏¢‡πÉ‡∏à", "‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î", "‡∏™‡∏≤‡∏¢‡∏ä‡∏•"];
const prefixes = ["06", "08", "09"];

function randomMaskedPhone() {
  const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
  const suffix = Math.floor(1000 + Math.random() * 9000);
  return `${prefix}xxxx${suffix}`;
}

function generateWithdrawList() {
  const list = [];
  for (let i = 0; i < 10; i++) {
    const name = names[Math.floor(Math.random() * names.length)];
    const phone = randomMaskedPhone();
    const amount = (Math.floor(Math.random() * (49999 - 3000 + 1)) + 3000).toLocaleString();
    list.push(`‡∏Ñ‡∏∏‡∏ì‡∏û‡∏µ‡πà ${name} ‡∏¢‡∏π‡∏™ ${phone} ‡∏ñ‡∏≠‡∏ô ${amount}`);
  }
  const today = new Date().toLocaleDateString("th-TH");
  return `üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${today}

${list.join("\n")}`;
}

async function generateTopGameMessage() {
  const games = [
    "Graffiti Rush ‚Ä¢ ‡∏Å‡∏£‡∏≤‡∏ü‡∏ü‡∏¥‡∏ï‡∏µ‡πâ ‡∏£‡∏±‡∏ä",
    "Treasures of Aztec ‚Ä¢ ‡∏™‡∏≤‡∏ß‡∏ñ‡πâ‡∏≥",
    "Fortune Ox ‚Ä¢ ‡∏ß‡∏±‡∏ß‡πÇ‡∏î‡∏î",
    "Fortune Snake ‚Ä¢ ‡∏á‡∏π‡∏ó‡∏≠‡∏á",
    "Fortune Rabbit ‚Ä¢ ‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†",
    "Lucky Neko ‚Ä¢ ‡πÅ‡∏°‡∏ß‡∏Å‡∏ß‡∏±‡∏Å",
    "Fortune Mouse ‚Ä¢ ‡∏´‡∏ô‡∏π‡∏ó‡∏≠‡∏á",
    "Dragon Hatch ‚Ä¢ ‡∏£‡∏±‡∏á‡∏°‡∏±‡∏á‡∏Å‡∏£",
    "Wild Bounty Showdown ‚Ä¢ ‡∏Ñ‡∏≤‡∏ß‡∏ö‡∏≠‡∏¢",
    "Ways of the Qilin ‚Ä¢ ‡∏Å‡∏¥‡πÄ‡∏•‡∏ô",
    "Galaxy Miner ‚Ä¢ ‡∏ô‡∏±‡∏Å‡∏Ç‡∏∏‡∏î‡∏≠‡∏ß‡∏Å‡∏≤‡∏®",
    "Incan Wonders ‚Ä¢ ‡∏™‡∏¥‡πà‡∏á‡∏°‡∏´‡∏±‡∏®‡∏à‡∏£‡∏£‡∏¢‡πå‡∏≠‡∏¥‡∏ô‡∏Ñ‡∏≤",
    "Diner Frenzy Spins ‚Ä¢ ‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏∏‡∏î‡∏õ‡∏±‡∏á",
    "Dragon's Treasure Quest ‚Ä¢ ‡∏°‡∏±‡∏á‡∏Å‡∏£‡∏ã‡πà‡∏≠‡∏ô‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥",
    "Jack the Giant Hunter ‚Ä¢ ‡πÅ‡∏à‡πá‡∏Å‡∏ú‡∏π‡πâ‡∏Ü‡πà‡∏≤‡∏¢‡∏±‡∏Å‡∏©‡πå"
  ];
  const selected = games.sort(() => 0.5 - Math.random()).slice(0, 5);
  const freeSpin = Math.floor(Math.random() * (500000 - 50000)) + 50000;
  const normal = Math.floor(Math.random() * (50000 - 5000)) + 5000;
  let msg = "üé≤ ‡πÄ‡∏Å‡∏°‡∏™‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏ï‡∏Å‡∏ö‡πà‡∏≠‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n\n";
  selected.forEach((g, i) => msg += `${i + 1}. ${g} - ${Math.floor(Math.random() * 20) + 80}%\n`);
  msg += `\nüí• ‡∏ü‡∏£‡∏µ‡∏™‡∏õ‡∏¥‡∏ô‡πÅ‡∏ï‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${freeSpin.toLocaleString()} ‡∏ö‡∏≤‡∏ó\nüí• ‡∏õ‡∏±‡πà‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÅ‡∏ï‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${normal.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏¢ ‡πÅ‡∏ï‡∏Å‡∏á‡πà‡∏≤‡∏¢ ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á üíï`;
  return msg;
}

async function generateReferralCommissionMessage() {
  const lines = [];
  for (let i = 0; i < 10; i++) {
    const phone = randomMaskedPhone();
    const amt = (Math.floor(Math.random() * 97000) + 3000).toLocaleString();
    lines.push(`‡∏¢‡∏π‡∏™ ${phone} ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô ${amt}`);
  }
  return `ü§ù ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô\n\n${lines.join("\n")}\n\nüí° ‡∏ä‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô!`;
}

app.post("/webhook", (req, res) => {
  Promise.all(req.body.events.map(async (event) => {
    if (event.type !== "message" || event.message.type !== "text") return;
    const msg = event.message.text.trim();
    const replyToken = event.replyToken;

    if (msg.startsWith("/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡πÄ‡∏î‡πá‡∏î")) latestTips.‡∏ó‡∏µ‡πÄ‡∏î‡πá‡∏î‡∏ö‡∏≠‡∏• = msg.replace("/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡πÄ‡∏î‡πá‡∏î", "").trim();
    else if (msg.startsWith("/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ß‡∏¢")) latestTips.‡∏´‡∏ß‡∏¢ = msg.replace("/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ß‡∏¢", "").trim();
    else if (msg.startsWith("/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏°‡∏ß‡∏¢")) latestTips.‡∏°‡∏ß‡∏¢ = msg.replace("/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏°‡∏ß‡∏¢", "").trim();
    else if (msg.startsWith("/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏•‡∏ü‡πå")) latestTips.‡πÑ‡∏•‡∏ü‡πå = msg.replace("/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏•‡∏ü‡πå", "").trim();
    else if (msg === "‡πÄ‡∏°‡∏ô‡∏π") {
      return client.replyMessage({
        replyToken,
        messages: [{
          type: "text",
          text: "üì≤ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢",
          quickReply: {
            items: [
              { type: "action", action: { type: "uri", label: "‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏•‡∏±‡∏Å", uri: "https://pgthai289.net/?openExternalBrowser=1" } },
              { type: "action", action: { type: "uri", label: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", uri: "https://pgthai289.net/customer/register/BTAI/?openExternalBrowser=1" } },
              { type: "action", action: { type: "message", label: "‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ñ‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", text: "‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ñ‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î" } },
              { type: "action", action: { type: "message", label: "‡∏™‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏ï‡∏Å‡∏î‡∏µ", text: "‡∏™‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏ï‡∏Å‡∏î‡∏µ" } },
              { type: "action", action: { type: "message", label: "‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°", text: "‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô" } },
              { type: "action", action: { type: "message", label: "‡∏ó‡∏µ‡πÄ‡∏î‡πá‡∏î‡∏ö‡∏≠‡∏•", text: "‡∏ó‡∏µ‡πÄ‡∏î‡πá‡∏î‡∏ö‡∏≠‡∏•" } },
              { type: "action", action: { type: "message", label: "‡∏ó‡∏µ‡πÄ‡∏î‡πá‡∏î‡∏´‡∏ß‡∏¢", text: "‡∏´‡∏ß‡∏¢" } },
              { type: "action", action: { type: "message", label: "‡∏ó‡∏µ‡πÄ‡∏î‡πá‡∏î‡∏°‡∏ß‡∏¢", text: "‡∏°‡∏ß‡∏¢" } },
              { type: "action", action: { type: "message", label: "‡πÑ‡∏•‡∏ü‡πå‡∏™‡∏î‡∏ô‡∏≥‡πÄ‡∏•‡πà‡∏ô", text: "‡πÑ‡∏•‡∏ü‡πå‡∏™‡∏î" } }
            ]
          }
        }]
      });
    } else if (msg === "‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ñ‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î") {
      return client.replyMessage({ replyToken, messages: [{ type: "text", text: generateWithdrawList() }] });
    } else if (msg === "‡∏™‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏ï‡∏Å‡∏î‡∏µ") {
      return client.replyMessage({ replyToken, messages: [{ type: "text", text: await generateTopGameMessage() }] });
    } else if (msg === "‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô") {
      return client.replyMessage({ replyToken, messages: [{ type: "text", text: await generateReferralCommissionMessage() }] });
    } else if (latestTips[msg]) {
      return client.replyMessage({ replyToken, messages: [{ type: "text", text: latestTips[msg] }] });
    }
  }))
    .then(() => res.status(200).end())
    .catch(err => {
      console.error(err);
      res.status(500).end();
    });
});

const port = process.env.PORT || 3000;
app.listen(port, () => console.log("BOT is running on port", port));
